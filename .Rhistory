idx<-min(which(patientData$subject==patIdx[i]))
startMed[i]<-patientData$LED[idx]
startLeftVolt[i]<-patientData$LeftVolt[idx+2]
startRightVolt[i]<-patientData$RightVolt[idx+2]
idx<-max(which(patientData$subject==patIdx[i]))
endMed[i]<-patientData$LED[idx]
endLeftVolt[i]<-patientData$LeftVolt[idx]
endRightVolt[i]<-patientData$RightVolt[idx]
}
startMed<- unlist(startMed)
endMed<- unlist(endMed)
startLeftVolt<- unlist(startLeftVolt)
startRightVolt<- unlist(startRightVolt)
endLeftVolt<- unlist(endLeftVolt)
endRightVolt<- unlist(endRightVolt)
startVolt<-rowMeans(cbind(startLeftVolt,startRightVolt))
endVolt<-rowMeans(cbind(endLeftVolt,endRightVolt))
startMed<- startMed[-c(which(is.na(endMed)))]
startVolt<- startVolt[-c(which(is.na(endMed)))]
endVolt<- endVolt[-c(which(is.na(endMed)))]
endMed<- endMed[-c(which(is.na(endMed)))]
ledData<-data.frame(start = startMed, end = endMed, startVolt = startVolt, endVolt = endVolt)
ggplot(ledData, aes(x=end, y=endVolt)) +
geom_point(size=2, shape=23)+
geom_smooth(method=lm)
ggplot(ledData, aes(x=start, y=endVolt)) +
geom_point(size=2, shape=23)+
geom_smooth(method=lm)
ggplot(ledData, aes(x=startVolt, y=endVolt)) +
geom_point(size=2, shape=23)+
geom_smooth(method=lm)
startMed-endMed
ledData<-data.frame(start = startMed, end = endMed, startVolt = startVolt, endVolt = endVolt, diff = startMed-endMed)
ggplot(ledData, aes(x=diff, y=endVolt)) +
geom_point(size=2, shape=23)+
geom_smooth(method=lm)
startMed
endMed
ggplot(ledData, aes(x=diff, y=startVolt)) +
geom_point(size=2, shape=23)+
geom_smooth(method=lm)
ggplot(ledData, aes(x=diff, y=start)) +
geom_point(size=2, shape=23)+
geom_smooth(method=lm)
ggplot(ledData, aes(x=start, y=diff)) +
geom_point(size=2, shape=23)+
geom_smooth(method=lm)
ggplot(ledData, aes(x=start, y=endVolt)) +
geom_point(size=2, shape=23)+
geom_smooth(method=lm)
View(patDemo)
patIdx<- unique(patientData$subject)
startMed<- list()
endMed<- list()
startLeftVolt<- list()
startRightVolt<- list()
endLeftVolt<- list()
endRightVolt<- list()
for (i in 1:length(patIdx)){
idx<-min(which(patientData$subject==patIdx[i]))
startMed[i]<-patientData$LED[idx]
startLeftVolt[i]<-patientData$LeftVolt[idx+2]
startRightVolt[i]<-patientData$RightVolt[idx+2]
idx<-max(which(patientData$subject==patIdx[i]))
endMed[i]<-patientData$LED[idx]
endLeftVolt[i]<-patientData$LeftVolt[idx]
endRightVolt[i]<-patientData$RightVolt[idx]
}
startMed<- unlist(startMed)
endMed<- unlist(endMed)
startLeftVolt<- unlist(startLeftVolt)
startRightVolt<- unlist(startRightVolt)
endLeftVolt<- unlist(endLeftVolt)
endRightVolt<- unlist(endRightVolt)
startVolt<-rowMeans(cbind(startLeftVolt,startRightVolt))
endVolt<-rowMeans(cbind(endLeftVolt,endRightVolt))
removeIDX<- which(is.na(endMed))
startMed<- startMed[-c(removeIDX)]
startVolt<- startVolt[-c(removeIDX)]
endVolt<- endVolt[-c(removeIDX)]
endMed<- endMed[-c(removeIDX)]
sex<-patDemo$Sex[-c(removeIDX)]
rm(list=ls())
library(plyr)
library(digest)
library(reshape2)
## visualization of specific fid
library("plot3D")
library("plot3Drgl") # for interactive 3D plotting
install.packages("plot3Drgl")
# this script tries to organize all fiducial files in a directory and summarize the findings
rm(list=ls())
library(plyr)
library(digest)
library(reshape2)
## visualization of specific fid
library("plot3D")
library("plot3Drgl") # for interactive 3D plotting
citation(package='plyr')
packageVersion('plyr')
setwd('D:\templateDBS')
list.files('D:\templateDBS', "*.fcsv")
list.files('D:/templateDBS', "*.fcsv")
csv_files <- list.files('D:/templateDBS', "*.fcsv")
i = 1
curr_split <- unlist(strsplit(csv_files[i],"_"))
if (length(curr_split)>1) { # extract name and session data
rater_template <- curr_split[1]
rater_mri_type <- curr_split[2]
rater_name <- curr_split[3]
rater_session <- as.numeric(curr_split[4])
rater_date <- as.numeric(unlist(strsplit(curr_split[5],"[.]"))[1])
}
curr_rater <- read.table(csv_files[i], header=FALSE, sep=",")
'D:/templateDBS/' + csv_files[i]
csv_files[i]
paste('D:/templateDBS/', csv_files[i])
paste('D:/templateDBS/', csv_files[i], sep = "")
filen<- paste('D:/templateDBS/', csv_files[i], sep = "")
curr_rater <- read.table(filen, header=FALSE, sep=",")
View(curr_rater)
df_rater <- data.frame(fid = 1:length(curr_rater$V1))
df_rater <- cbind(df_rater,X=curr_rater[2],Y=curr_rater[3],Z=curr_rater[4],rater=rater_name,
template=rater_template,mri_type=rater_mri_type,
session=rater_session,date=rater_date,name=curr_rater[12],
description=curr_rater[13])
rm(list=ls())
library(plyr)
library(digest)
library(reshape2)
## visualization of specific fid
library("plot3D")
library("plot3Drgl") # for interactive 3D plotting
citation(package='plyr')
packageVersion('plyr')
df_raters <- data.frame(fid=integer(),X=double(),Y=double(),Z=double(),rater=factor(),
template=factor(),mri_type=factor(),session=integer(),date=integer(),
name=character(),description=character(),stringsAsFactors = FALSE)
csv_files <- list.files('D:/templateDBS', "*.fcsv")
i = 1
curr_split <- unlist(strsplit(csv_files[i],"_"))
if (length(curr_split)>1) { # extract name and session data
rater_template <- curr_split[1]
rater_mri_type <- curr_split[2]
rater_name <- curr_split[3]
rater_session <- as.numeric(curr_split[4])
rater_date <- as.numeric(unlist(strsplit(curr_split[5],"[.]"))[1])
}
filen<- paste('D:/templateDBS/', csv_files[i], sep = "")
curr_rater <- read.table(filen, header=FALSE, sep=",")
df_rater <- data.frame(fid = 1:length(curr_rater$V1))
df_rater <- cbind(df_rater,X=curr_rater[2],Y=curr_rater[3],Z=curr_rater[4],rater=rater_name,
template=rater_template,mri_type=rater_mri_type,
session=rater_session,date=rater_date,name=curr_rater[12],
description=curr_rater[13])
View(df_rater)
df_rater <- rename(df_rater, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_raters <- rbind(df_raters,df_rater)
# Remapping levels
levels(df_raters$rater) # original; alphabetical
levels(df_raters$rater) <- 1:11 # rename raters from 1:11
ddply(df_raters, "fid", summarize, X=mean(X), Y=mean(Y), Z=mean(Z) ) # study mean
filen<- paste ('D:\templateDBS\BHG18_landmarkprotocol-master\input\input_mean','\UHF_MEAN_no_outliers.fcsv', sep = "")
rm(list=ls())
library(plyr)
library(digest)
library(reshape2)
## visualization of specific fid
library("plot3D")
library("plot3Drgl") # for interactive 3D plotting
citation(package='plyr')
packageVersion('plyr')
df_raters <- data.frame(fid=integer(),X=double(),Y=double(),Z=double(),rater=factor(),
template=factor(),mri_type=factor(),session=integer(),date=integer(),
name=character(),description=character(),stringsAsFactors = FALSE)
csv_files <- list.files('D:/templateDBS', "*.fcsv")
i = 2
curr_split <- unlist(strsplit(csv_files[i],"_"))
if (length(curr_split)>1) { # extract name and session data
rater_template <- curr_split[1]
rater_mri_type <- curr_split[2]
rater_name <- curr_split[3]
rater_session <- as.numeric(curr_split[4])
rater_date <- as.numeric(unlist(strsplit(curr_split[5],"[.]"))[1])
}
filen<- paste('D:/templateDBS/', csv_files[i], sep = "")
curr_rater <- read.table(filen, header=FALSE, sep=",")
df_rater <- data.frame(fid = 1:length(curr_rater$V1))
df_rater <- cbind(df_rater,X=curr_rater[2],Y=curr_rater[3],Z=curr_rater[4],rater=rater_name,
template=rater_template,mri_type=rater_mri_type,
session=rater_session,date=rater_date,name=curr_rater[12],
description=curr_rater[13])
df_rater <- rename(df_rater, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_raters <- rbind(df_raters,df_rater)
#print(i)
levels(df_raters$rater) # original; alphabetical
levels(df_raters$rater) <- 1:11 # rename raters from 1:11
#### Create study MEAN ########################################################################
ddply(df_raters, "fid", summarize, X=mean(X), Y=mean(Y), Z=mean(Z) ) # study mean
filen<- paste ('D:/templateDBS/BHG18_landmarkprotocol-master/input/input_mean','/UHF_MEAN_no_outliers.fcsv', sep = "")
UHF_gold <- read.table(filen, header=FALSE, sep=",")
df_gold <- data.frame(fid = 1:length(curr_rater$V1))
df_gold <- cbind(df_gold,X=UHF_gold[2],Y=UHF_gold[3],Z=UHF_gold[4],rater='GOLD',
template=rater_template,mri_type=rater_mri_type,
session=rater_session,date=rater_date,name=UHF_gold[12],
description=UHF_gold[13])
df_gold <- rename(df_gold, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
UHF_gold <- read.table(filen, header=FALSE, sep=",")
length(curr_rater$V1)
View(curr_rater)
rm(list=ls())
library(plyr)
library(digest)
library(reshape2)
## visualization of specific fid
library("plot3D")
library("plot3Drgl") # for interactive 3D plotting
citation(package='plyr')
packageVersion('plyr')
df_raters <- data.frame(fid=integer(),X=double(),Y=double(),Z=double(),rater=factor(),
template=factor(),mri_type=factor(),session=integer(),date=integer(),
name=character(),description=character(),stringsAsFactors = FALSE)
csv_files <- list.files('D:/templateDBS', "*.fcsv")
i=1
curr_split <- unlist(strsplit(csv_files[i],"_"))
if (length(curr_split)>1) { # extract name and session data
rater_template <- curr_split[1]
rater_mri_type <- curr_split[2]
rater_name <- curr_split[3]
rater_session <- as.numeric(curr_split[4])
rater_date <- as.numeric(unlist(strsplit(curr_split[5],"[.]"))[1])
}
filen<- paste('D:/templateDBS/', csv_files[i], sep = "")
curr_rater <- read.table(filen, header=FALSE, sep=",")
df_rater <- data.frame(fid = 1:length(curr_rater$V1))
df_rater <- cbind(df_rater,X=curr_rater[2],Y=curr_rater[3],Z=curr_rater[4],rater=rater_name,
template=rater_template,mri_type=rater_mri_type,
session=rater_session,date=rater_date,name=curr_rater[12],
description=curr_rater[13])
df_rater <- rename(df_rater, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_raters <- rbind(df_raters,df_rater)
# Remapping levels
levels(df_raters$rater) # original; alphabetical
levels(df_raters$rater) <- 1:11 # rename raters from 1:11
#### Create study MEAN ########################################################################
ddply(df_raters, "fid", summarize, X=mean(X), Y=mean(Y), Z=mean(Z) ) # study mean
#### Gold-standard study MEAN ########################################################################
# Gold standard (mean from previous group)
filen<- paste ('D:/templateDBS/BHG18_landmarkprotocol-master/input/input_mean','/MNI2009b_T1_RC_1_20180703.fcsv.fcsv', sep = "")
UHF_gold <- read.table(filen, header=FALSE, sep=",")
df_gold <- data.frame(fid = 1:length(curr_rater$V1))
df_gold <- cbind(df_gold,X=UHF_gold[2],Y=UHF_gold[3],Z=UHF_gold[4],rater='GOLD',
template=rater_template,mri_type=rater_mri_type,
session=rater_session,date=rater_date,name=UHF_gold[12],
description=UHF_gold[13])
df_gold <- rename(df_gold, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
filen<- paste ('D:/templateDBS/BHG18_landmarkprotocol-master/input/input_mean','/MNI2009b_T1_RC_1_20180703.fcsv', sep = "")
UHF_gold <- read.table(filen, header=FALSE, sep=",")
df_gold <- data.frame(fid = 1:length(curr_rater$V1))
df_gold <- cbind(df_gold,X=UHF_gold[2],Y=UHF_gold[3],Z=UHF_gold[4],rater='GOLD',
template=rater_template,mri_type=rater_mri_type,
session=rater_session,date=rater_date,name=UHF_gold[12],
description=UHF_gold[13])
UHF_gold <- read.table(filen, header=FALSE, sep=",")
filen<- paste ('D:/templateDBS','/MNI2009b_T1_RC_1_20180703.fcsv', sep = "")
UHF_gold <- read.table(filen, header=FALSE, sep=",")
df_gold <- data.frame(fid = 1:length(curr_rater$V1))
df_gold <- cbind(df_gold,X=UHF_gold[2],Y=UHF_gold[3],Z=UHF_gold[4],rater='GOLD',
template=rater_template,mri_type=rater_mri_type,
session=rater_session,date=rater_date,name=UHF_gold[12],
description=UHF_gold[13])
df_gold <- rename(df_gold, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
View(df_gold)
df_raters$xdist <- NA
df_raters$ydist <- NA
df_raters$zdist <- NA
df_raters$rater_error <- NA
df_raters$outlier <- NA
dim(df_raters)
for (i in 1:dim(df_raters)[1]) {
curr_rater <- df_raters[i,]
mean_raters <- df_gold[curr_rater$fid,]
xdist <- curr_rater$X - mean_raters$X
ydist <- curr_rater$Y - mean_raters$Y
zdist <- curr_rater$Z - mean_raters$Z
rater_error <- sqrt( (curr_rater$X - mean_raters$X)^2 + (curr_rater$Y - mean_raters$Y)^2 + (curr_rater$Z - mean_raters$Z)^2 )
df_raters[i,]$xdist <- xdist
df_raters[i,]$ydist <- ydist
df_raters[i,]$zdist <- zdist
rater_error <- sqrt( (curr_rater$X - mean_raters$X)^2 + (curr_rater$Y - mean_raters$Y)^2 + (curr_rater$Z - mean_raters$Z)^2 )
df_raters[i,]$rater_error <- rater_error
df_raters[i,]$outlier <- (rater_error > 10) # focus on true outliers (1cm+) first (TODO: optimize threshold later)
#print(rater_error)
}
mean(df_raters$rater_error)
sd(df_raters$rater_error)
ddply(df_raters, "rater", summarize, mean=mean(rater_error), sd=sd(rater_error))
dirList<- list.dirs(path = "D:/templateDBS/coregCTMRI/scenes", full.names = TRUE, recursive = TRUE)
dirList<- list.dirs(path = "D:/templateDBS/coregCTMRI/scenes")
dirList<- list.dirs(path = "D:/templateDBS/coregCTMRI/scenes", all.files = FALSE)
dirList<- list.dirs(path = "D:/templateDBS/coregCTMRI/scenes", recursive = FALSE)
length(dirList)
dirList[1]
filen<- paste(dirList[1], '/CT/LeftElectrodeActual.fcsv', sep = "")
filen
curr_rater <- read.table(filen, header=FALSE, sep=",")
View(curr_rater)
fidData <- read.table(filen, header=FALSE, sep=",")
View(fidData)
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
library(plyr)
library(digest)
library(reshape2)
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
View(fidData)
df_raters <- data.frame(modality=character(),side = character(), BotX=double(),
BotY=double(),BotZ=double(), TopX=double(),
TopY=double(),TopZ=double(), stringsAsFactors = FALSE)
View(fidData)
fidData[1,2]
df_rater <- data.frame(modality='CT',side = 'Left', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
View(df_rater)
df_raters <- rbind(df_raters,df_rater)
View(df_raters)
dirList[1]
strsplit(dirList[1],"/")
subject<-strsplit(dirList[1],"/")
View(subject)
subject[-1]
tail(subject)
tail(subject,n=1)
last(subject)
library(data.table)
last(subject)
length(subject)
unlist(strsplit(dirList[1],"/"))
subject<-unlist(strsplit(dirList[1],"/"))
length(subject)
subject[length(subject)]
as.numeric(str_extract(t(subject[length(subject)]), "[0-9]+"))
library(stringr)
as.numeric(str_extract(t(subject[length(subject)]), "[0-9]+"))
subject<-as.numeric(str_extract(t(subject[length(subject)]), "[0-9]+"))
df_raters <- data.frame(subject = double(), modality=character(),side = character(), BotX=double(),
BotY=double(),BotZ=double(), TopX=double(),
TopY=double(),TopZ=double(), stringsAsFactors = FALSE)
subject<-unlist(strsplit(dirList[1],"/"))
subject<-as.numeric(str_extract(t(subject[length(subject)]), "[0-9]+"))
filen<- paste(dirList[1], '/CT/LeftElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='CT',side = 'Left', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
filen<- paste(dirList[1], '/CT/RightElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='CT',side = 'Right', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
filen<- paste(dirList[1], '/CT/RightElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='CT',side = 'Right', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
View(df_raters)
filen<- paste(dirList[1], '/MR/LeftElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='MR',side = 'Left', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
filen<- paste(dirList[1], '/MR/RightElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='MR',side = 'Right', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
View(df_raters)
df_raters <- data.frame(subject = double(), modality=character(),side = character(), BotX=double(),
BotY=double(),BotZ=double(), TopX=double(),
TopY=double(),TopZ=double(), stringsAsFactors = FALSE)
dirList<- list.dirs(path = "D:/templateDBS/coregCTMRI/scenes", recursive = FALSE)
i = 1
subject<-unlist(strsplit(dirList[1],"/"))
subject<-as.numeric(str_extract(t(subject[length(subject)]), "[0-9]+"))
filen<- paste(dirList[1], '/CT/LeftElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='CT',side = 'Left', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
filen<- paste(dirList[1], '/CT/RightElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='CT',side = 'Right', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
filen<- paste(dirList[1], '/MR/LeftElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='MR',side = 'Left', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
filen<- paste(dirList[1], '/MR/RightElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='MR',side = 'Right', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
View(df_raters)
df_raters <- data.frame(subject = double(), modality=character(),side = character(), BotX=double(),
BotY=double(),BotZ=double(), TopX=double(),
TopY=double(),TopZ=double(), stringsAsFactors = FALSE)
dirList<- list.dirs(path = "D:/templateDBS/coregCTMRI/scenes", recursive = FALSE)
for (i in 1:length(dirList)) {
subject<-unlist(strsplit(dirList[1],"/"))
subject<-as.numeric(str_extract(t(subject[length(subject)]), "[0-9]+"))
filen<- paste(dirList[1], '/CT/LeftElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='CT',side = 'Left', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
filen<- paste(dirList[1], '/CT/RightElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='CT',side = 'Right', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
filen<- paste(dirList[1], '/MR/LeftElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='MR',side = 'Left', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
filen<- paste(dirList[1], '/MR/RightElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='MR',side = 'Right', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
}
View(df_raters)
View(df_raters)
df_raters <- data.frame(subject = double(), modality=character(),side = character(), BotX=double(),
BotY=double(),BotZ=double(), TopX=double(),
TopY=double(),TopZ=double(), stringsAsFactors = FALSE)
dirList<- list.dirs(path = "D:/templateDBS/coregCTMRI/scenes", recursive = FALSE)
for (i in 1:length(dirList)) {
subject<-unlist(strsplit(dirList[i],"/"))
subject<-as.numeric(str_extract(t(subject[length(subject)]), "[0-9]+"))
filen<- paste(dirList[i], '/CT/LeftElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='CT',side = 'Left', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
filen<- paste(dirList[i], '/CT/RightElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='CT',side = 'Right', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
filen<- paste(dirList[i], '/MR/LeftElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='MR',side = 'Left', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
filen<- paste(dirList[i], '/MR/RightElectrodeActual.fcsv', sep = "")
fidData <- read.table(filen, header=FALSE, sep=",")
fidData<-rename(fidData, c("V2"="X","V3"="Y","V4"="Z","V12"="name","V13"="description"))
df_rater <- data.frame(subject = subject, modality='MR',side = 'Right', BotX=fidData[1,2],
BotY=fidData[1,3],BotZ=fidData[1,4], TopX=fidData[2,2],
TopY=fidData[2,3],TopZ=fidData[2,4], stringsAsFactors = FALSE)
df_raters <- rbind(df_raters,df_rater)
}
View(df_raters)
print(dirList)
View(df_raters)
install.packages("blogdown")
blogdown::install_hugo()
install.packages("blogdown")
install.packages("blogdown")
blogdown::install_hugo()
blogdown::serve_site()
cwd
blogdown::serve_site()
setwd(''C:/Users/Greydon/Documents/R/code/greydongilmore/website-hugo')
setwd('C:/Users/Greydon/Documents/R/code/greydongilmore/website-hugo')
blogdown::serve_site()
